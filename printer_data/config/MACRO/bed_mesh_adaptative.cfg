#########################################
########## ADAPTIVE BED MESH ############
#########################################

# Written by Frix_x#0161 #
# @version: 4.0

# JOURNAL DES MODIFICATIONS :

#   v4.0 : - patché et re-simplifié la macro pour qu'elle fonctionne avec les dernières modifications de Klipper : zero_reference_position est beaucoup plus contraint et tous les trucs sophistiqués
#            qui était utilisé dans le passé pour le référencement sur le RRI avec une sonde virtuelle ou un plugin d'étalonnage Z n'est plus possible. Maintenant, le retour doit être effectué à
#            correction de zero_reference_poisition et ne peut plus être dynamique (mais c'est aussi plus simple)
#          - ce changement permet également au maillage d'avoir désormais un point de sonde uniforme pour plus de flexibilité

#   v3.0 : - ajout de l'utilisation de balises [exclude_object] pour extraire le cadre de délimitation du premier calque (un grand merci à Kyleisah pour l'excellente idée et l'inspiration)
#            la macro est toujours entièrement compatible avec l'ancienne méthode utilisant le paramètre SIZE : elle l'utilisera si elle est spécifiée, sinon
#            retour à la méthode [exclude_object] et si les deux ne sont pas disponibles, il fera un maillage de lit complet et normal comme d'habitude.
#          - ajout également d'un paramètre FORCE_MESH pour mailler même pour de très petites pièces
#          - suppression du RRI qui était toujours ajouté dans l'appel BED_MESH_CALIBRATE. Désormais, il n'est ajouté que lorsqu'il y en a un défini dans la section [bed_mesh]

#   v2.3 : - déplacement des notes d'installation dans un fichier de démarque approprié dans : docs > features > adaptive_bed_mesh.md

#   v2.2 : - suppression de l'obligation de définir mesh_pps dans la section [bed_mesh]. C'est maintenant à nouveau facultatif comme il se doit

#   v2.1 : - correctif pour le maillage nominal (quand aucun paramètre SIZE n'est utilisé ou SIZE=0_0_0_0)

#   v2.0 : - divisé en plusieurs macros pour pouvoir utiliser le point central dans la position de sondage du lit d'étalonnage z avant de réaliser le maillage

#   v1.1 : - correction d'un bug lors de l'analyse d'une chaîne lors de l'utilisation de lettres majuscules dans la section [bed_mesh]

#   v1.0 : - première macro de maillage de lit adaptatif

# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Si vous souhaitez l'utiliser dans votre propre configuration, veuillez l'installer en tant que macro autonome comme décrit dans le
# section d'installation de ce fichier : docs > features > adaptive_bed_mesh.md
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

### Qu'est-ce que c'est ? ###
# Le maillage de lit adaptatif est simple : c'est un maillage de lit normal, mais seulement « où » et « quand » c'est nécessaire.
# Parfois j'imprime de petites pièces, parfois j'imprime des plaques complètes et j'aime obtenir un bed_mesh précis (comme 9x9 ou plus). Cependant, cela prend un
# beaucoup de temps et ça ne sert à rien de sonder toute la plaque pour seulement une partie de 5cm². C’est donc là que le maillage de lit adaptatif aide :
# 1. Il obtient les coordonnées des coins de la surface du premier calque à partir du slicer ou des balises [exclude_object]
# 2. Il calcule un nouvel ensemble de points à sonder sur cette nouvelle zone pour obtenir au moins la même précision que votre maillage de lit standard. Par exemple, si
# un maillage de lit normal est réglé sur 9x9 pour 300 mm², il calculera alors 3x3 pour une surface de 100 mm². Aussi, si pour une raison quelconque vos pièces sont en
# le coin du plateau de construction (comme pour un PEI endommagé au centre), il les suivra pour sonder cette zone exacte.
# 3. Pour aller plus loin, il ne fera pas de bed_mesh s'il y a moins de 3x3 points à sonder (très petite partie seule) et choisir/changer le
# algorithme (bicubique/lagrange) dépendant de la taille et de la forme du maillage calculé (comme 3x3 vs 3x9)

# N'hésitez pas à me pinger sur Discord (Frix_x#0161) si vous avez besoin d'aide ou si vous avez des commentaires pour l'améliorer :)

# ======================================================================================================================================================================================================================
# NE PAS MODIFIER CES VARIABLES (elles sont utilisées en interne par la macro de maillage de lit adaptatif)
[gcode_macro _ADAPTIVE_MESH_VARIABLES]
variable_ready: False
variable_do_mesh: False
variable_do_nominal: False
variable_mesh_min: 0,0
variable_mesh_max: 0,0
variable_probe_count: 0,0
variable_algo: "bicubic"
gcode:


[gcode_macro COMPUTE_MESH_PARAMETERS]
description: Compute the mesh parameters and store them for later use
gcode:
    # 1 ----- GET ORIGINAL BEDMESH PARAMS FROM CONFIG ----------------------
    {% set xMinConf, yMinConf = printer["configfile"].config["bed_mesh"]["mesh_min"].split(',')|map('trim')|map('int') %}
    {% set xMaxConf, yMaxConf = printer["configfile"].config["bed_mesh"]["mesh_max"].split(',')|map('trim')|map('int') %}
    {% set xProbeCntConf, yProbeCntConf = printer["configfile"].config["bed_mesh"]["probe_count"].split(',')|map('trim')|map('int') %}
    {% set algo = printer["configfile"].config["bed_mesh"]["algorithm"]|lower %}
    {% set xMeshPPS, yMeshPPS = (printer["configfile"].config["bed_mesh"]["mesh_pps"]|default('2,2')).split(',')|map('trim')|map('int') %}

    {% set margin = params.MARGIN|default(5)|int %} # marge supplémentaire pour mailler autour du premier calque
    {% set force_mesh = params.FORCE_MESH|default(False) %} # forcer le maillage même s'il s'agit d'une petite partie (c'est-à-dire calculé à moins de 3x3)


    # 2 ----- OBTENIR LES COORDONNÉES ET LA TAILLE DE LA PREMIÈRE COUCHE -------------------------------------
    # Si le paramètre SIZE est défini et non un espace réservé factice, nous l'utilisons pour effectuer la logique de maillage de lit adaptatif
    {% set coordinatesFound = false %}
    {% if params.SIZE is defined and params.SIZE != "0_0_0_0" %}
        RESPOND MSG="Vous avez un parametre 'SIZE' pour le maillage de lit adaptatif"
        {% set xMinSpec, yMinSpec, xMaxSpec, yMaxSpec = params.SIZE.split('_')|map('trim')|map('int') %}
        {% set coordinatesFound = true %}

    {% elif printer.exclude_object is defined %}
        {% if printer.exclude_object.objects %}
            # Sinon, si SIZE n'est pas défini, nous utilisons les balises [exclude_object]
            # Cette méthode est dérivée du référentiel Kyleisah KAMP :https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging)
            RESPOND MSG="Pas de parametre 'SIZE', utilisation des balises [exclude_object] pour le maillage de lit adaptatif"
            {% set eo_points = printer.exclude_object.objects|map(attribute='polygon')|sum(start=[]) %}
            {% set xMinSpec = eo_points|map(attribute=0)|min %}
            {% set yMinSpec = eo_points|map(attribute=1)|min %}
            {% set xMaxSpec = eo_points|map(attribute=0)|max %}
            {% set yMaxSpec = eo_points|map(attribute=1)|max %}
            {% set coordinatesFound = true %}
        {% endif %}
    {% endif %}

    {% if not coordinatesFound %}
        # S'il n'y a pas de paramètre SIZE et pas de balise [exclude_object], alors nous voulons faire un maillage de lit nominal
        # donc rien à faire ici...
        RESPOND MSG="Aucune information sur les coordonnees de la 1er couche, creation d'un maillage de lit nominal au lieu d'un maillage adaptatif"
    {% endif %}


    # Si la taille de la première couche a été correctement récupérée, nous pouvons faire la logique de maillage de lit adaptatif, sinon nous
    # retour à la fonction originale et nominale BED_MESH_CALIBRATE (sonde du lit complet)
    {% if xMinSpec and yMinSpec and xMaxSpec and yMaxSpec %}

        # 3 ----- APPLIQUER DES MARGES ----------------------------------------- -----
        # Nous utilisons la fonction min/max car nous voulons qu'elle soit contrainte par l'original
        # taille du maillage. Cela évitera de sortir des limites de la machine
        {% set xMin = [xMinConf, (xMinSpec - margin)]|max %}
        {% set xMax = [xMaxConf, (xMaxSpec + margin)]|min %}
        {% set yMin = [yMinConf, (yMinSpec - margin)]|max %}
        {% set yMax = [yMaxConf, (yMaxSpec + margin)]|min %}

        # 4 ----- CALCULER UN NOUVEAU COMPTE DE SONDE ----------------------------------
        # Le but est d'avoir au moins la même précision que depuis la config. On calcule donc un nombre équivalent
        # de points de palpage sur chaque dimension X/Y (la distance entre deux points doit être la même que dans la configuration)
        {% set xProbeCnt = ((xMax - xMin) * xProbeCntConf / (xMaxConf - xMinConf))|round(0, 'ceil')|int %}
        {% set yProbeCnt = ((yMax - yMin) * yProbeCntConf / (yMaxConf - yMinConf))|round(0, 'ceil')|int %}

        # Ensuite, trois possibilités :
        #   a) Les deux dimensions ont moins de 3 points de palpage : le bed_mesh n'est pas nécessaire car il s'agit d'une petite impression (si elle n'est pas forcée).
        #   b) Si l'une des dimensions est inférieure à 3 et l'autre est supérieure. L'imprimé semble allongé et
        #      besoin du bed_mesh adaptatif : on ajoute des points de sondage à la petite direction pour atteindre 3 et pouvoir le faire.
        #   c) Si les deux directions sont supérieures à 3, nous avons besoin du bed_mesh adaptatif et c'est ok.
        # A la fin on contrôle (selon la méthode Klipper bed_mesh : "_verify_algorithm") que le nombre de sondes calculé est
        # valable selon l'algorithme choisi ou modifiez-le si besoin.
        {% if xProbeCnt < 3 and yProbeCnt < 3 %}
            {% if force_mesh %}
                RESPOND MSG="Maille de lit forcee (petite partie detectee) : maillage 3x3..."
                {% set xProbeCnt = 3 %}
                {% set yProbeCnt = 3 %}
                {% set algo = "lagrange" %}
                {% set mesh_min = "%d,%d"|format(xMin, yMin) %}
                {% set mesh_max = "%d,%d"|format(xMax, yMax) %}
                {% set probe_count = "%d,%d"|format(xProbeCnt, yProbeCnt) %}
                RESPOND MSG="Computed mesh parameters: MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} ALGORITHM={algo}"
                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={False}
                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_min VALUE='"{mesh_min}"'
                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_max VALUE='"{mesh_max}"'
                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=probe_count VALUE='"{probe_count}"'
                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=algo VALUE='"{algo}"'
            {% else %}
                RESPOND MSG="Parametres de maillage calcules : aucun, le maillage du lit n'est pas necessaire pour les tres petites pieces"
                SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={False}
            {% endif %}
        {% else %}
            {% set xProbeCnt = [3, xProbeCnt]|max %}
            {% set yProbeCnt = [3, yProbeCnt]|max %}

            # Vérification des points de palpage et des algorithmes d'interpolation selon le code Klipper
            {% if xMeshPPS != 0 or yMeshPPS != 0 %}
                {% set probeCntMin = [xProbeCnt, yProbeCnt]|min %}
                {% set probeCntMax = [xProbeCnt, yProbeCnt]|max %}
                {% if algo == "lagrange" and probeCntMax > 6 %}
                    # L'interpolation de Lagrange a tendance à osciller lors de l'utilisation de plus de 6 échantillons : passer à bicubique
                    {% set algo = "bicubic" %}
                {% endif %}
                {% if algo == "bicubic" and probeCntMin < 4 %}
                    {% if probeCntMax > 6 %}
                        # Cas impossible : il faut ajouter un point de palpage sur le petit axe pour être >= 4 (on veut que 5 reste impair)
                        {% if xProbeCnt > yProbeCnt %}
                            {% set yProbeCnt = 5 %}
                        {% else %}
                            {% set xProbeCnt = 5 %}
                        {% endif %}
                    {% else %}
                        # In this case bicubic is not adapted (less than 4 points): switch to lagrange
                        {% set algo = "lagrange" %}
                    {% endif %}
                {% endif %}
            {% endif %}

            # 5 ----- FORMAT THE PARAMETERS AND SAVE THEM ---------------------------
            {% set mesh_min = "%d,%d"|format(xMin, yMin) %}
            {% set mesh_max = "%d,%d"|format(xMax, yMax) %}
            {% set probe_count = "%d,%d"|format(xProbeCnt, yProbeCnt) %}
            RESPOND MSG="Computed mesh parameters: MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} ALGORITHM={algo}"
            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={False}
            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_min VALUE='"{mesh_min}"'
            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=mesh_max VALUE='"{mesh_max}"'
            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=probe_count VALUE='"{probe_count}"'
            SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=algo VALUE='"{algo}"'
        {% endif %}
    {% else %}
        SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_mesh VALUE={True}
        SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=do_nominal VALUE={True}
    {% endif %}

    # Finaly save in the variables that we already computed the values
    SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={True}


[gcode_macro ADAPTIVE_BED_MESH]
description: Perform a bed mesh, but only where and when it's needed
gcode:
    {% set ready = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].ready %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home printer first!") }
    {% endif %}

    # If the parameters where computed, we can do the mesh by calling the _DO_ADAPTIVE_MESH
    {% if ready %}
        _DO_ADAPTIVE_MESH

    # Si les paramètres n'ont pas été calculés avant l'appel de ADAPTIVE_BED_MESH, nous appelons COMPUTE_MESH_PARAMETERS
    # macro d'abord, puis appelez la macro _DO_ADAPTIVE_MESH après
    {% else %}
        RESPOND MSG="Maillage de lit adaptatif : parametres non deja calcules, appelant automatiquement la macro COMPUTE_MESH_PARAMETERS avant le maillage"
        COMPUTE_MESH_PARAMETERS {rawparams}
        M400 # mandatory to flush the gcode buffer and be sure to use the last computed parameters
        _DO_ADAPTIVE_MESH
    {% endif %}


[gcode_macro _DO_ADAPTIVE_MESH]
gcode:
    # 1 ----- POPULATE BEDMESH PARAMS FROM SAVED VARIABLES ----------------------
    {% set do_mesh = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_mesh %}
    {% set do_nominal = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_nominal %}
    {% set mesh_min = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_min %}
    {% set mesh_max = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_max %}
    {% set probe_count = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].probe_count %}
    {% set algo = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].algo %}

    # 2 --------- ADAPTIVE_BED_MESH LOGIC --------------------------------------

    # If it's necessary to do a mesh
    {% if do_mesh %}
        # If it's a standard bed_mesh to be done
        {% if do_nominal %}
            RESPOND MSG="Maille de lit adaptative : maille de lit nominale"
            BED_MESH_CALIBRATE
        {% else %}
                RESPOND MSG="Adaptive bed mesh: MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} ALGORITHM={algo}"
                BED_MESH_CALIBRATE MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} ALGORITHM={algo}
        {% endif %}
    {% else %}
        RESPOND MSG="Maille de lit adaptative : aucun maillage a realiser"
    {% endif %}

    # Set back the 'ready' parameter to false
    SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={False}